{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["DemoState","physicalMemSize","pageSize","availFrames","memorySet","errorMsg","undefined","currTime","running","playing","finished","logs","pageTables","memory","Array","processes","processId","numBytes","numFrames","timeUnits","timeRan","status","ResetState","App","state","hoverId","hoverMemoryId","timer","onAddProcess","setState","Math","ceil","onDemo","clearTimeout","searchTimer","Object","assign","_","cloneDeep","onReset","onPlay","timerSystemClock","onStop","setTimeout","advanceSystemClock","advanceProcesses","allocateProcs","deallocateProcs","afterDealloc","deallocateMemory","afterAlloc","allocateMemory","every","proc","some","map","procId","procFrames","msg","time","allocate","deallocate","process","push","memoryBlocks","currId","start","memBlocks","addr","length","end","idx","currAlloc","page","i","frame","ids","id","forEach","includes","this","runningProcesses","filter","p","totalPages","availFramesHeight","round","availFramesRounded","availOverflow","className","href","type","value","onChange","e","trunc","parseFloat","target","isNaN","onClick","totalFrames","bg","isLast","isFull","height","varStyle","memoryOverflowId","style","onMouseEnter","onMouseLeave","entries","pageTable","table","j","frames","reverse","log","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e42c9365.chunk.js","sourcesContent":["import './App.css';\nimport { Component } from 'react'\nimport './tailwind.output.css'\nimport _ from \"lodash\"\n\nconst DemoState = {\n    // memory settings\n    physicalMemSize: 64,\n    pageSize: 4,\n    availFrames: 16,\n    memorySet: true,\n\n    // runtime\n    errorMsg: undefined,\n    currTime: 0,\n    running: false,\n    playing: false,\n    finished: false,\n    logs: [],\n\n    // memory mgmt\n    pageTables: {},\n    memory: new Array(16),\n    processes: [\n      { \n        processId: \"email\",\n        numBytes: 12,\n        numFrames: 3,\n        timeUnits: 5,\n        timeRan: 0,\n        status: 'Waiting',\n      },\n      { \n        processId: \"excel\",\n        numBytes: 32,\n        numFrames: 8,\n        timeUnits: 3,\n        timeRan: 0,\n        status: 'Waiting',\n      },\n      { \n        processId: \"browser\",\n        numBytes: 36,\n        numFrames: 9,\n        timeUnits: 8,\n        timeRan: 0,\n        status: 'Waiting',\n      },\n      { \n        processId: \"music\",\n        numBytes: 16,\n        numFrames: 4,\n        timeUnits: 12,\n        timeRan: 0,\n        status: 'Waiting',\n      },\n      { \n        processId: \"IO\",\n        numBytes: 26,\n        numFrames: 7,\n        timeUnits: 4,\n        timeRan: 0,\n        status: 'Waiting',\n      }\n    ],\n}\n\nconst ResetState = {\n  // memory settings\n  physicalMemSize: 0,\n  pageSize: 0,\n  availFrames: 0,\n  memorySet: false,\n\n  // runtime\n  errorMsg: undefined,\n  currTime: 0,\n  running: false,\n  playing: false,\n  finished: false,\n  logs: [],\n\n  // memory mgmt\n  pageTables: {},\n  memory: [],\n  processes: [],\n}\n\nclass App extends Component {\n  state = {\n    // memory settings\n    physicalMemSize: undefined,\n    pageSize: undefined,\n    availFrames: undefined,\n    memorySet: false,\n\n    // ui\n    hoverId: undefined,\n    hoverMemoryId: undefined,\n\n    // memory mgmt\n    pageTables: {},\n    memory: [],\n    processes: [],\n\n    // runtime\n    errorMsg: undefined,\n    currTime: 0,\n    running: false,\n    playing: false,\n    finished: false,\n    logs: [],\n\n    // new process form\n    processId: '',\n    numBytes: 0,\n    timeUnits: 0,\n  }\n  timer = undefined\n\n  onAddProcess = () => {\n    const { pageSize, processes, processId, numBytes, timeUnits } = this.state\n\n    if ( timeUnits <= 0 ) {\n      this.setState({ errorMsg: 'Process must run for at least 1 unit of time' })\n      return\n    } \n    if ( numBytes <= 0 ) {\n      this.setState({ errorMsg: 'Process must be greater than 0 bytes' })\n      return\n    } \n    if ( !processId ) {\n      this.setState({ errorMsg: 'Process missing process id' })\n      return\n    }\n\n    this.setState({\n      processes: [ ...processes, {\n        processId,\n        numBytes,\n        numFrames: Math.ceil( numBytes / pageSize ),\n        timeUnits,\n        timeRan: 0,\n        status: 'Waiting',\n      }],\n      processId: '',\n      numBytes: 0,\n      timeUnits: 0,\n    })\n  }\n\n  onDemo = () => {\n    if ( this.timer ) {\n      clearTimeout( this.searchTimer )\n    }\n    this.timer = undefined\n    this.setState(Object.assign(this.state, _.cloneDeep(DemoState)))\n  }\n\n  onReset = () => {\n    if ( this.timer ) {\n      clearTimeout( this.searchTimer )\n    }\n    this.timer = undefined\n    this.setState(Object.assign(this.state, _.cloneDeep(ResetState)))\n  }\n\n  onPlay = () => {\n    this.setState({ running: true, playing: true, finished: false })\n    this.timerSystemClock()\n  }\n\n  onStop = () => {\n    if ( this.timer ) {\n      clearTimeout( this.searchTimer )\n    }\n    this.timer = undefined\n    this.setState({ running: false, playing: false })\n  }\n\n  timerSystemClock = () => {\n    if ( this.timer ) {\n      clearTimeout( this.searchTimer )\n    }\n    this.timer = undefined\n    this.timer = setTimeout(() => {\n      const playing = this.advanceSystemClock()\n      if (playing) {\n        this.timerSystemClock()\n      }\n    }, 1800 )\n  }\n\n  advanceSystemClock = () => {\n    let { currTime, memory, pageTables, logs } = this.state\n    const [processes, allocateProcs, deallocateProcs, availFrames] = this.advanceProcesses()\n\n    const afterDealloc = this.deallocateMemory(memory, deallocateProcs, pageTables)\n    memory = afterDealloc[0]\n    pageTables = afterDealloc[1]\n\n    const afterAlloc = this.allocateMemory(memory, allocateProcs, pageTables)\n    memory = afterAlloc[0]\n    pageTables = afterAlloc[1]\n    const finished = processes.every( proc => proc.status === \"Finished\")\n    const playing = this.state.playing ? !finished : false\n\n    if (currTime !== 0 || this.state.processes.some( proc => proc.status !== \"Waiting\")) {\n      currTime++\n    }\n\n    logs = [\n      ...logs,\n      ...deallocateProcs.map(([procId,procFrames])=> ({\n        msg: `Deallocating ${procFrames} frames for ${procId}`,\n        time: currTime,\n      })),\n      ...allocateProcs.map(([procId,procFrames])=> ({\n        msg: `Allocating ${procFrames} frames for ${procId}`,\n        time: currTime,\n      })),\n    ]\n\n    this.setState({\n      availFrames,\n      currTime,\n      finished,\n      logs,\n      memory,\n      pageTables,\n      playing,\n      processes,\n    })\n\n    return playing\n  }\n\n  advanceProcesses = () => {\n    let { availFrames } = this.state\n    const allocate = []\n    const deallocate = []\n\n    const processes = this.state.processes.map( process => {\n      if ( process.status === 'Running' ) {\n        process.timeRan += 1\n        if ( process.timeRan >= process.timeUnits ) {\n          process.status = 'Finished'\n          availFrames += process.numFrames\n          deallocate.push([process.processId, process.numFrames])\n        }\n        return { ...process }\n      }\n\n      if ( process.status === 'Waiting' && process.numFrames <= availFrames ) {\n        availFrames -= process.numFrames\n        allocate.push([process.processId, process.numFrames])\n        return { ...process, status: 'Running' }\n      }\n\n      return process\n    })\n\n    return [processes, allocate, deallocate, availFrames]\n  }\n\n  allocateMemory(memory, processes, pageTables) {\n    if ( processes.length === 0 ) {\n      return [memory, pageTables]\n    }\n    let idx = 0\n    let [processId, numFrames] = processes[idx]\n    let currAlloc = 0\n    let page = 0\n    for(let i=0;i<memory.length;i++) {\n      if (!memory[i]) {\n        // add to page table\n        if (!pageTables[processId]) {\n          pageTables[processId] = []\n        }\n        pageTables[processId].push({ page, frame: i })\n        page++\n\n        // allocate memory\n        memory[i] = processId\n        currAlloc++\n\n        // next process if all frames are allocated\n        if ( currAlloc === numFrames ) {\n          idx++\n          if ( idx === processes.length ) {\n            break\n          }\n          [processId, numFrames] = processes[idx]\n          page = 0\n          currAlloc = 0\n        }\n      }\n    }\n    return [memory, pageTables]\n  }\n\n  deallocateMemory(memory, processes, pageTables) {\n    if ( processes.length === 0 ) {\n      return [memory, pageTables]\n    }\n    const ids = processes.map( ([id,_]) => id )\n    // remove from page table\n    ids.forEach( id => {\n      delete pageTables[id]\n    })\n    // deallocate memory\n    for(let i=0;i<memory.length;i++) {\n      if (ids.includes(memory[i])) {\n        memory[i] = undefined\n      }\n    }\n    return [memory, pageTables]\n  }\n\n  memoryBlocks = () => {\n    const { memory } = this.state\n    let currId = null\n    let start = 0\n    const memBlocks = []\n    for (let addr=0; addr<memory.length; addr++) {\n      const processId = memory[addr]\n      if (currId === null) {\n        currId = processId\n      }\n      if (processId !== currId) {\n        memBlocks.push({ processId: currId, start, end: addr-1 })\n        start = addr\n      }\n      currId = processId\n    }\n    memBlocks.push({ processId: currId, start, end: memory.length-1 })\n    return memBlocks\n  }\n\n  render() {\n    const {\n      currTime,\n      errorMsg,\n      hoverId,\n      hoverMemoryId,\n      logs,\n      physicalMemSize,\n      pageSize,\n      pageTables,\n      playing,\n      processId,\n      processes,\n      numBytes,\n      running,\n      memorySet,\n      timeUnits,\n      availFrames,\n    } = this.state\n\n    const memBlocks = this.memoryBlocks()\n    const runningProcesses = processes.filter( p => p.status === 'Running' )\n    const totalPages = physicalMemSize / pageSize\n    const availFramesHeight = Math.round(availFrames / totalPages * 500)\n    const availFramesRounded = runningProcesses.length === 0 ? \"rounded-t-2xl\" : \"\"\n    const availOverflow = hoverMemoryId === \"Logical-Avail\" ? \"\" : \"overflow-hidden\"\n\n    return(\n      <div className=\"App\">\n        <div className=\"flex flex-col w-full\">\n          <div className=\"flex flex-row w-full\">\n            <div className=\"flex flex-col w-full justify-center content-center items-center bg-yellow-300 p-8 m-4 shadow\">\n              <h1 className=\"font-sans font-medium text-xl m-2\">\n                Paging Memory Management Simulator\n              </h1>\n              <p className=\"mt-8\">\n                Simulates logical and physical memory usage for sequences of processes using a paging memory management scheme.\n              </p>\n              <a href=\"https://github.com/tlskins/memory-mgmt-simulator\"\n                className=\"underline text-blue-700 mt-4\"\n              >\n                https://github.com/tlskins/memory-mgmt-simulator\n              </a>\n            </div>\n          </div>\n\n          <div className=\"flex flex-row w-full bg-indigo-300 p-8\">\n            <div className=\"flex flex-col w-full justify-center content-center items-center\">\n              <h2 className=\"font-sans m-2\">\n                Total Memory: \n                { memorySet ?\n                  <span className=\"rounded-lg bg-yellow-300 text-lg shadow px-2 py-1 m-2\"> { physicalMemSize } </span>\n                  :\n                  <input type=\"text\"\n                    className=\"mx-2 rounded p-1 w-20\"\n                    value={physicalMemSize}\n                    onChange={ e => {\n                      const physicalMemSize = Math.trunc(parseFloat(e.target.value))\n                      this.setState({ physicalMemSize: isNaN(physicalMemSize) ? 0 : physicalMemSize })\n                    }}\n                  />\n                }\n                bytes\n              </h2>\n              <h2 className=\"font-sans m-2\">\n                Page Size:\n                { memorySet ?\n                  <span className=\"rounded-lg bg-yellow-300 text-lg shadow px-2 py-1 m-2\"> { pageSize } </span>\n                  :\n                  <input type=\"text\"\n                    className=\"mx-2 rounded p-1 w-20\"\n                    value={pageSize}\n                    onChange={ e => {\n                      const pageSize = Math.trunc(parseFloat(e.target.value))\n                      this.setState({ pageSize: isNaN(pageSize) ? 0 : pageSize })\n                    }}\n                  />\n                }\n                bytes\n              </h2>\n\n              { memorySet &&\n                <h2 className=\"font-sans m-2\">\n                  Available Pages: \n                  <span className=\"rounded-lg bg-yellow-300 text-lg shadow px-2 py-1 m-2\"> { availFrames } </span>\n                </h2>\n              }\n\n              <div className=\"flex flex-row\">\n                { !memorySet &&\n                  <button\n                    className=\"rounded-lg shadow bg-teal-300 hover:bg-blue-300 font-sans font-semibold underline w-20 px-2 py-1 m-6\"\n                    onClick={() => {\n                      if ( physicalMemSize <= 0 ) {\n                        this.setState({ errorMsg: 'Physical memory must be greater than 0' })\n                        return\n                      }\n                      if ( pageSize <= 0 ) {\n                        this.setState({ errorMsg: 'Page size must be greater than 0' })\n                        return\n                      }\n                      if ( pageSize % 2 !== 0 ) {\n                        this.setState({ errorMsg: 'Page size must be a multiple of 2' })\n                        return\n                      }\n                      const totalFrames = physicalMemSize / pageSize\n                      this.setState({\n                        memorySet: true,\n                        memory: new Array(totalFrames),\n                        totalFrames,\n                        availFrames: totalFrames,\n                      })\n                    }}\n                  >\n                    Enter\n                  </button>\n                }\n\n                { !running &&\n                  <button\n                    className=\"rounded-lg shadow bg-teal-300 hover:bg-blue-300 font-sans font-semibold underline w-20 px-2 py-1 m-6\"\n                    onClick={ this.onDemo }\n                  >\n                    Demo\n                  </button>\n                }\n\n                <button\n                  className=\"rounded-lg shadow bg-orange-300 hover:bg-blue-300 font-sans font-semibold underline w-20 px-2 py-1 m-6\"\n                  onClick={ this.onReset }\n                >\n                  Reset\n                </button>\n\n                { (memorySet && !playing) &&\n                  <button\n                    className=\"rounded-lg shadow bg-green-400 hover:bg-blue-300 font-sans font-semibold underline w-20 px-2 py-1 m-6\"\n                    onClick={ this.onPlay }\n                  >\n                    Play\n                  </button>\n                }\n\n                { playing &&\n                  <button\n                    className=\"rounded-lg shadow bg-green-400 hover:bg-red-400 font-sans font-semibold underline w-20 px-2 py-1 m-6\"\n                    onClick={ this.onStop }\n                  >\n                    Stop\n                  </button>\n                }\n              </div>\n            </div>\n          </div>\n\n          { errorMsg &&\n            <div className=\"flex w-full justify-center content-center items-center my-4 py-12 bg-orange-400 cursor-pointer hover:bg-orange-600\"\n              onClick={() => this.setState({ errorMsg: undefined })}\n            >\n              <h2 className=\"flex-row text-xl\">\n                { errorMsg }\n              </h2>\n            </div>\n          }\n\n          <div className=\"flex flex-row\">\n            <div className=\"flex-col w-3/12 p-8\">\n              <h2 className=\"text-xl underline\">FIFO Process Queue</h2>\n              { (memorySet && !running) &&\n                <div>\n                  <div className=\"flex flex-row m-2\">\n                    <p className=\"m-2 w-32\">Process Id</p>\n                    <input type=\"text\"\n                      className=\"p-2 bg-indigo-300 rounded\"\n                      value={ processId }\n                      onChange={ e => this.setState({ processId: e.target.value })}\n                    />\n                  </div>\n                  <div className=\"flex flex-row m-2\">\n                    <p className=\"m-2 w-32\">Size (Bytes)</p>\n                    <input type=\"text\"\n                      className=\"p-2 bg-indigo-300 rounded\"\n                      value={ numBytes }\n                      onChange={ e => {\n                        const numBytes = Math.trunc(parseFloat(e.target.value))\n                        this.setState({ numBytes: isNaN(numBytes) ? 0 : numBytes })\n                      }}\n                    />\n                  </div>\n                  <div className=\"flex flex-row m-2\">\n                    <p className=\"m-2 w-32\">Units of Time</p>\n                    <input type=\"text\"\n                      className=\"p-2 bg-indigo-300 rounded\"\n                      value={ timeUnits }\n                      onChange={ e => {\n                        const timeUnits = Math.trunc(parseFloat(e.target.value))\n                        this.setState({ timeUnits: isNaN(timeUnits) ? 0 : timeUnits })\n                      }}\n                    />\n                  </div>\n                  <button className=\"m-2 p-2 w-32 rounded-lg shadow bg-teal-300 hover:bg-blue-300 rounded\"\n                    onClick={this.onAddProcess}\n                  >\n                    Add Process\n                  </button>\n                  <button className=\"m-2 p-2 w-32 rounded-lg shadow bg-teal-300 hover:bg-blue-300 rounded\"\n                    onClick={ () => {\n                      if ( processes.length === 0 ) {\n                        this.setState({ errorMsg: 'Must have at least 1 process to run' })\n                        return\n                      }\n                      this.setState({ running: true }, this.advanceSystemClock)\n                    }}\n                  >\n                    Run\n                  </button>\n                </div>\n              }\n\n              { processes.length > 0 &&\n                <table className=\"table-auto mt-4 w-full\">\n                  <tr>\n                    <th className=\"px-2 py1\">#</th>\n                    <th className=\"px-2 py-1\">Id</th>\n                    <th className=\"px-2 py-1\">Size (bytes)</th>\n                    <th className=\"px-2 py-1\">Total Time</th>\n                    <th className=\"px-2 py-1\">Run Time</th>\n                    <th className=\"px-2 py-1\">Status</th>\n                  </tr>\n                  { processes.map((process, i) => {\n                    let bg = \"bg-gray-400\"\n                    if (process.status === \"Running\") {\n                      bg = \"bg-green-400\"\n                    }\n                    if (process.status === \"Finished\") {\n                      bg = \"bg-blue-300\"\n                    }\n                    return(\n                      <tr key={i} \n                        className={`flex-row rounded w-24 p-2 m-2 ${bg}`}\n                      >\n                        <td className=\"border px-2 py-1\"> { i+1 } </td>\n                        <td className=\"border px-2 py-1\"> { process.processId } </td>\n                        <td className=\"border px-2 py-1\"> { process.numBytes } </td>\n                        <td className=\"border px-2 py-1\"> { process.timeUnits } </td>\n                        <td className=\"border px-2 py-1\"> { process.timeRan } </td>\n                        <td className=\"border px-2 py-1\"> { process.status } </td>\n                      </tr>\n                    )\n                  })}\n                </table>\n              }\n\n              { (memorySet && running) &&\n                <div>\n                  <div className=\"flex flex-row m-2\">\n                    <p className=\"m-2 w-32\">Time { currTime } </p>\n                    <button className=\"m-2 p-2 w-32 rounded-lg shadow bg-teal-300 hover:bg-blue-300 rounded\"\n                      onClick={ this.advanceSystemClock }\n                    >\n                      Advance Time\n                    </button>\n                  </div>\n                </div>\n              }\n            </div>\n\n            <div className=\"flex-col w-3/12 p-8 justify-center content-center items-center\">\n              <h2 className=\"text-xl underline\">Logical Memory</h2>\n              { runningProcesses.map((process, i) => {\n                const isLast = i === runningProcesses.length - 1\n                const isFull = availFrames === 0\n\n                const height = Math.round(process.numFrames / totalPages * 500)\n                let varStyle = i === 0 ? \"rounded-t-2xl\" : \"\"\n                if (isFull && isLast) {\n                  varStyle = \"rounded-b-2xl\"\n                }\n                if (!isFull || !isLast) {\n                  varStyle += \" border-b-2 border-white\"\n                }\n                const memoryOverflowId = `Logical-Process-${i}`\n                if (hoverMemoryId !== memoryOverflowId) {\n                  varStyle += \" overflow-hidden\"\n                }\n\n                return(\n                  <div key={i}\n                    style={{ height }}\n                    className={`flex flex-row bg-blue-300 p-2 mx-2 ${varStyle} shadow-lg justify-center content-center items-center`}\n                    onMouseEnter={() => this.setState({ hoverMemoryId: memoryOverflowId })}\n                    onMouseLeave={() => this.setState({ hoverMemoryId: undefined })}\n                  >\n                    <div className=\"flex flex-col font-medium text-justify\">\n                      <div>\n                        Process: <span className=\"text-white\">{ process.processId }</span>\n                      </div>\n                      <div>\n                        Size: <span className=\"text-white\">{ process.numBytes }</span>\n                      </div>\n                      <div>\n                        Pages: <span className=\"text-white\">{ process.numFrames }</span>\n                      </div>\n                    </div>\n                  </div>\n                )\n              })}\n              { availFrames > 0 &&\n                <div style={{ height: availFramesHeight }}\n                  className={`flex flex-row bg-gray-400 p-2 mx-2 ${availFramesRounded} rounded-b-2xl shadow-lg justify-center content-center items-center ${availOverflow}`}\n                  onMouseEnter={() => this.setState({ hoverMemoryId: \"Logical-Avail\" })}\n                  onMouseLeave={() => this.setState({ hoverMemoryId: undefined })}\n                >\n                  <div className=\"flex flex-col font-medium text-justify\">\n                    <div>\n                      Size: <span className=\"text-white\">{ availFrames * pageSize }</span>\n                    </div>\n                    <div>\n                      Pages: <span className=\"text-white\">{ availFrames }</span>\n                    </div>\n                  </div>\n                </div>\n              }\n            </div>\n\n            <div className=\"flex-col w-3/12 p-8\">\n              <h2 className=\"text-xl underline\">Page Tables</h2>\n              { Object.entries( pageTables ).map(([processId, pageTable], i) => \n                <div key={i}\n                  className=\"rounded bg-yellow-300 shadow-lg p-2 m-2\"\n                  onMouseEnter={() => this.setState({ hoverId: processId })}\n                >\n                  <h2 className=\"font-semibold my-2\">\n                    Process: <span className=\"text-blue-600 underline\">{ processId }</span>\n                  </h2>\n                  { hoverId === processId && pageTable.map((table,j) => \n                    <div key={j}>\n                      <span className=\"mx-2\">Page: { table.page }</span>\n                      <span className=\"mx-2\">Frame: { table.frame }</span>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex-col w-3/12 p-8\">\n              <h2 className=\"text-xl underline\">Physical Memory</h2>\n              { memorySet && memBlocks.map(({ start, end, processId }, i) => {\n                  const isLast = i === memBlocks.length - 1\n                  const frames = end - start + 1\n                  const height = Math.round(frames / totalPages * 500)\n                  let varStyle = i === 0 ? \"rounded-t-2xl\" : \"\"\n                  if (isLast) {\n                    varStyle += \" rounded-b-2xl\"\n                  }\n                  if (!isLast) {\n                    varStyle += \" border-b-2 border-white\"\n                  }\n                  const memoryOverflowId = `Physical-Avail-${i}`\n                  if (hoverMemoryId !== memoryOverflowId) {\n                    varStyle += \" overflow-hidden\"\n                  }\n\n                  return(\n                    <div key={i} \n                      style={{ height }}\n                      className={`flex flex-row bg-${processId ? 'blue-300' : 'gray-400'} ${varStyle} p-2 mx-2 shadow-lg justify-center content-center items-center`}\n                      onMouseEnter={() => this.setState({ hoverMemoryId: memoryOverflowId })}\n                      onMouseLeave={() => this.setState({ hoverMemoryId: undefined })}\n                    >\n                      <div className=\"flex flex-col font-medium text-justify\">\n                        { processId &&\n                          <div>\n                            Process: <span className=\"text-white\">{ processId }</span>\n                          </div>\n                        }\n                        <div>\n                          Size: <span className=\"text-white\">{ frames * pageSize }</span>\n                        </div>\n                        <div>\n                          Frames: <span className=\"text-white\">{ frames }</span>\n                        </div>\n                      </div>\n                    </div>\n                  )\n                })\n              }\n            </div>\n          </div>\n\n          <div className=\"flex flex-row justify-center content-center items-center\">\n            <div className=\"flex-col p-8\">\n              <h2 className=\"text-xl underline\">Memory Allocation Logs</h2>\n              { logs.reverse().map( log => (\n                <p>\n                  @ {log.time} - { log.msg }\n                </p>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}